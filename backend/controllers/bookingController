import express from 'express';
import mongoose from "mongoose";

import { Booking } from '../models/bookingModel.js';
import { Gallery } from '../models/galleryModel.js';
import User from '../models/userModel.js';

const createBooking = async (req, res) => {
    //const user_id = `${req.params.user_id}`;
    //const gallery_id = `${req.params.gallery_id}`;
    try{
        const newBooking = {
            date: req.body.date,
            gallery: req.body.gallery_id,
            user: req.body.user_id,
            status: "Scheduled"
          };
        
        const booking = await Booking.create(newBooking);
        const savedBooking = await booking.save();

        const user = await User.findById(req.body.user_id);
        user.bookings.push(savedBooking._id);
        await user.save();

        const gallery = await Gallery.findById(req.body.gallery_id);
        gallery.bookings.push(savedBooking._id);
        await gallery.save();
        return res.status(201).send(booking);
    } catch (error){
        console.log(error.message);
        res.status(500).send({ message: error.message });
    }
}

const getBookingById = async (req, res) => {
  try {
    const id  = req.params.id;
    const booking = await Booking.findById(id);
    return res.status(200).json(booking);
  } catch (error) {
    console.log(error.message);
    res.status(500).send({ message: error.message });
  }
}

const editBooking = async (req, res) => {
    // try{
       
    //     const id = req.params;
    //     const booking = await Booking.findByIdAndUpdate(id, req.body);
    //     const savedBooking = await booking.save();
    //     return res.status(201).send(savedBooking);
    // } catch (error){
    //     console.log(error.message);
    //     res.status(500).send({ message: error.message });
    // }
    try {
      const id = req.params.booking_id; // Assuming your booking ID parameter is named "booking_id"
      const updatedFields = req.body;
  
      // Validate if the booking ID is valid
      if (!mongoose.Types.ObjectId.isValid(id)) {
        return res.status(400).json({ message: 'Invalid booking ID' });
      }
  
      // Find the existing booking by ID
      const booking = await Booking.findById(id);
  
      // Check if the booking exists
      if (!booking) {
        return res.status(404).json({ message: 'Booking not found' });
      }
  
      // Update only the fields that are present in the request body
      Object.keys(updatedFields).forEach((field) => {
        booking[field] = updatedFields[field];
      });
  
      // Save the updated booking
      const savedBooking = await booking.save();
  
      return res.status(200).json(savedBooking);
    } catch (error) {
      console.log(error.message);
      res.status(500).json({ message: error.message });
    }
}

const getBookingsForUser = async(req, res) =>{
    try {
        const id = `${req.params.user_id}`;
        const user = await User.findById(id);

        // if (!user) {
        // return res.status(404).json({ message: 'User not found' });
        // }
        // // Ensure the user making the request matches the authenticated user
        // if (user.id !== req.user.id) {
        //   return res.status(403).json({ message: 'Access denied. User does not have permission.' });
        // }

        await user.populate('bookings');
        console.log(user.bookings);
        return res.status(200).json(user.bookings);
      } catch (error) {
        console.log(error.message);
        res.status(500).send({ message: error.message });
      }
} 

const myBookings = async (req, res) => {
    console.log(req.user._id);
    try {const bookings = await Booking.find({ user: req.user._id });
  
    res.status(200).json({
      success: true,
      bookings,
    });
    } catch(error){
        console.log(error.message);
        res.status(500).send({ message: error.message });
    }
  };

const getBookingsForGallery = async(req, res) =>{
    try {
        const id = `${req.params.gallery_id}`;
        const gallery = await Gallery.findById(id);

        if (!gallery) {
        return res.status(404).json({ message: 'Gallery not found' });
        }

    // Populate the 'arts' field in the gallery with the actual art documents
        await gallery.populate('bookings');
        return res.status(200).json(gallery.bookings);
      } catch (error) {
        console.log(error.message);
        res.status(500).send({ message: error.message });
      }
} 


export{
    createBooking,
    editBooking,
    getBookingsForUser,
    getBookingsForGallery, 
    myBookings, 
    getBookingById
}
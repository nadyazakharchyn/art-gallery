import User from '../models/userModel.js';
import generateToken from '../utils/secretToken.js';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import { JWT_SECRET } from "../config.js";


const authUser = async (req, res) => {
  const { email, password } = req.body;
  console.log(password);
  try{
    const user = await User.findOne({ email });
    console.log(user.password)
    if (!user) {
      return res.status(401).json({ error: 'Incorrect password or email' });
    }

    const passwordMatch = await bcrypt.compare(password, user.password);
    console.log(passwordMatch)
    if (!passwordMatch) {
      return res.status(401).json({ error: 'Incorrect password or email' });
    }
    // Create a JWT token
    const token = jwt.sign({ userId: user._id, email: user.email }, JWT_SECRET, {
      expiresIn: '1h',
    });
    res.cookie("token", token, {
      withCredentials: true,
      httpOnly: false,
    });
    res.status(200).json({ token, userId: user._id });
  } catch(error){
    console.error(error);
  }
};

const registerUser = async (req, res) => {
  try {
    const { name, email, password } = req.body;
    const role = "user";
    
    const userExists = await User.findOne({ email });
    console.log(userExists);
    if (userExists) {
      res.status(400);
      throw new Error('User already exists');
    }
    const user = new User({ name, email, password, role });
    await user.save();
    res.status(201).json({ message: 'Registration successful' });
  } catch (error) {
    res.status(500).json({ error: 'Registration failed' });
  }
};


const logoutUser = (req, res) => {
  res.cookie('jwt', '', {
    httpOnly: true,
    expires: new Date(0),
  });
  res.status(200).json({ message: 'Logged out successfully' });
};


const getUserProfile = async (req, res) => {
  const user = await User.findById(req.params.id);

  if (user) {
    res.json({
      _id: user._id,
      name: user.name,
      email: user.email,
    });
  } else {
    res.status(404);
    throw new Error('User not found');
  }
};

// @desc    Update user profile
// @route   PUT /api/users/profile
// @access  Private
const updateUserProfile = async (req, res) => {
  const user = await User.findById(req.params.id);

  if (user) {
    user.name = req.body.name || user.name;
    user.email = req.body.email || user.email;

    if (req.body.password) {
      user.password = req.body.password;
    }

    const updatedUser = await user.save();

    res.json({
      _id: updatedUser._id,
      name: updatedUser.name,
      email: updatedUser.email,
    });
  } else {
    res.status(404);
    throw new Error('User not found');
  }
};
export {
  authUser,
  registerUser,
  logoutUser,
  getUserProfile,
  updateUserProfile,
};